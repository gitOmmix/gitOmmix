#!/bin/env bash

# Boilerplate bash init
# Set strict mode
set -uo pipefail
IFS=$'\n\t'

# Test getopt
# Allow a command to fail with !’s side effect on errexit
# Use return value from ${PIPESTATUS[0]}, because ! hosed $?
! getopt --test > /dev/null 
if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
    echo 'I’m sorry, `getopt --test` failed in this environment.'
    exit 1
fi

# Load git ommix functions
source /usr/share/git-ommix/functions

# Settings
# Default values
PROVIDER=
METHOD=
PATIENT=
SAMPLE=
DATE=`date +%Y-%m-%d`
ID=`base64 /dev/urandom | tr -d "/+=" | head -c 10`
INVALIDATE=
USE=
REVISION_OF=
MESSAGE=
DEBUG="n"
FILES="*"

# Global config
[[ -f "/etc/gitommix.conf" ]] && source "/etc/gitommix.conf"

# Local config
[[ -f "$HOME/.config/gitommix.conf" ]] && source "$HOME/.config/gitommix.conf"

CURRENT_DIR="$PWD"
STATELESS="n"

# Parse arguments
# Test for the number of options, at least two (verb + object)
if [[ $# -lt 2 ]]; then
    echo "Insufficient number of arguments"
    usage root
fi

# Get verb and object
VERB="$1"
OBJECT="$2"
shift 2

# getopt options
OPTIONS=p:s:m:d
LONGOPTS=provider:,method:,patient:,sample:,date:,id:,invalidate:,use:,revision_of:,message:,debug

# -temporarily store output to be able to check for errors
# -activate quoting/enhanced mode (e.g. by writing out “--options”)
# -pass arguments only via   -- "$@"   to separate them correctly
! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "git-ommix" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    # e.g. return value is 1
    #  then getopt has complained about wrong arguments to stdout
    usage root
    exit 2
fi

# Read getopt’s output this way to handle the quoting right:
eval set -- "$PARSED"

# Parse options
while true; do
    case "$1" in
        --provider)
            PROVIDER="$2"
            shift 2
            ;;
        --method)
            METHOD="$2"
            shift 2
            ;;
        -p|--patient)
            PATIENT="$2"
            shift 2
            ;;
        -s|--sample)
            SAMPLE="$2"
            shift 2
            ;;
        --date)
            DATE="$2"
            shift 2
            ;;
        --id)
            ID="$2"
            shift 2
            ;;
        --use)
            USE+=("$2")
            shift 2
            ;;
        --invalidate)
            INVALIDATE+=("$2")
            shift 2
            ;;
        --revision_of)
            REVISION_OF="$2"
            shift 2
            ;;
        -m|--message)
            MESSAGE="$2"
            shift 2
            ;;
        -d|--debug)
            DEBUG="y"
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Programming error"
            exit 3
            ;;
    esac
done

FILES=${@:-$FILES}

# Output parameter values for debug
if [[ $DEBUG = "y" ]]; then
    echo "Verb: $VERB"
    echo "Object: $OBJECT"
    echo "Provider: $PROVIDER"
    echo "Method: $METHOD"
    echo "Patient: $PATIENT"
    echo "Sample: $SAMPLE"
    echo "Date: $DATE"
    echo "Id: $ID$"
    echo "Use: ${USE[@]}"
    echo "Invalidate: ${INVALIDATE[@]}"
    echo "Revision_of: $REVISION_OF"
    echo "Message: $MESSAGE"
    echo "Files: $FILES"
fi

# Stateless mode : when the patient is specified, go to the repo or create it if necessary
if [[ -n "$PATIENT" ]]; then
    STATELESS="y"
    
    # Patient and sample must be given in stateless calls when adding
    # [[ ! $VERB = "get" ]] && [[ -z "$SAMPLE" ]] && die "The sample id must be specified"

    # Go to repo dir (create if it does not exist)
    mkdir -p "$GIT_OMMIX_REPO_DIR"
    cd "$GIT_OMMIX_REPO_DIR"

    # Go to repo (create if it does not exist)
    if [[ -d "$PATIENT" ]]; then
        cd "$PATIENT"
    else
        create_repo "$PATIENT"
    fi
# Stateful mode : when we are in the repo get the patient id from the repo name
else
    # set +e
    REPO=`git rev-parse --show-toplevel 2> /dev/null`
    RETVAL=$?
    # set -e
    [[ $RETVAL -ne 0 ]] && die "Not a git ommix repo"
    PATIENT=${REPO##*/}
fi

# Check that we are indeed in a git repo
if [[ ! -d ".git/annex" ]]; then
    die "Not in a git ommix repo"
fi

# In stateless mode, go to the sample branch
if [[ -n "$SAMPLE" ]]; then
    # checkout branch (create if it does not exist)
    git stash push &>/dev/null
    git checkout "sample|$SAMPLE" &>/dev/null || create_sample "$SAMPLE"
    # set +e
    git stash pop &>/dev/null
    # set -e
# In stateful mode, get the sample id from the current branch
else
    SAMPLE=`git branch --show-current 2> /dev/null || true`
fi

case "$VERB" in
     add) add $OBJECT;;
     list) list $OBJECT;;
     get) get $OBJECT;;
     *) usage "root";;
esac
