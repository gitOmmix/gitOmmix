#!/bin/bash

# usage function
function usage
{
    case "$1" in
        root) 
            echo "git ommix {verb} {object} [--options]Â [files]

Verbs:
- add
- list
- get

Objects:
- patient
- sample
- data
- result
- diagnostic

Options:
- --id/-i : object id (default = random base64 10 chars)
- --date/-D : sampling/analysis date (default = current date)
- --provider/-P : data/result provider (default = current user)
- --patient/-p : patient (default = current patient)
- --sample/-s : sample (default = current sample)
- --message/-m : add an arbitrary PROV-O RDF triplet to the transaction
- --debug/-d : debug

Files: files to add (default = all new/modified files)

Register bash completions with register completions

Git ommix can be configured with the \$XDG_CONFIG/.gitommix file, or with environment variables

Available options are:
- GIT_OMMIX_REPO_DIR : place to find patient repos
"
            ;;
        add)
            echo "git ommix add {patient, sample, data, result, diagnostic} [--options] [--message]

# Patient 

Create patient repo with the given id.
Options :

-i <id>

# Sample

Create the branch with the given sample id for the current or selected patient.

Options :

 -i <id>
 -p <patient>

# Data 

Add the FILES to data, with the given id, for the current or selected sample in the current or selected patient.
Data are always DERIVED_FROM the sample, but could be also be a REVISION_OF previous data. This can be set by pointing to a data commit to revise.
The data that has been revised can also be INVALIDATEd at the same time.

Options :

-i <id>
-p <patient>
-s <sample>
[--revision_of <data_hash>]
[--invalidate]

# Result 

Options :

-i <id> 
-p <patient> 
-s <sample> 
--use <data_hash> 
[--revision_of <result_hash>]
[--invalidate]

# Diagnostic

Add a diagnostic with the given id, for the current or selected patient.
The diagnostic can USE multiple results and diagnostics, be the REVISION_OF multiple diagnostics, which can be INVALIDATEd at the same time.
The diagnostic branch pointers for the revised diagnostics are destroyed.

Options :

-i <id>
-p <patient>
--use <result/diagnostic_hash>
[--revision_of <diagnostic_hash>]
[--invalidate]

Add data/result to the current patient and sample if inside a repo, or to the --patient and --sample specified.
If stateless, copy the files to the repo."
            ;;
    esac
    exit 0
}

# Print messages passed as arguments and exit in error
function die
{
    echo $@
    exit 1
}

# Redirect commands to &>/dev/null if not DEBUGging
function dbg
{
    if [[ "$DEBUG" ]]; then
        "$@"
    else
        "$@" &>/dev/null
    fi
}

# Stash in place modifications
function stash
{
    git stash push
    "$@"
    git stash pop
}

# Add patient
# Uses :
# - ID
function add_patient
{
    # Create the patient repo dir and data and result subdirs
    mkdir -p "$ID/data"
    mkdir -p "$ID/result"

    # Go to the patient repo
    cd "$ID"

    # Init git, git annex
    dbg git init
    dbg git annex init

    # Set some default options :
    # - make `cat` the default pager makes it easier to parse outputs
    # - set rule for annex usage
    dbg git config core.pager cat
    dbg git config annex.largefiles "$GIT_OMMIX_LARGE_FILES"

    # Rename the default branch to the patient ID
    dbg git checkout -b "patient|$ID"

    # Create an empty commit with the PROV message
    dbg git commit --allow-empty \
        --author "$PROVIDER" \
        --date "$DATE" \
        -m "patient:$ID

patient:$ID a prov:Entity .
patient:$ID a MSH:Patient .
$MESSAGE2"
}

# Add sample
# Uses :
# - ID
# - PATIENT
function add_sample
{
    # Create a new sample branch stemming from the patient branch
    dbg stash git checkout -b "sample|$ID" "patient|$PATIENT"

    # Build the PROV message
    MESSAGE="sample:$ID

provider:$PROVIDER a prov:Agent .

sample:$ID a prov:Entity .
sample:$ID wasDerivedFrom patient:$PATIENT .
sample:$ID wasAttributedTo provider:$PROVIDER .
sample:$ID generatedAtTime xsd:dateTime:$DATE .
"

    # Add a method PROV triplets if given
    if [[ "$METHOD" ]];then
        MESSAGE+="sample:$ID wasGeneratedBy method:$METHOD .

method:$METHOD a prov:Activity .
method:$METHOD used patient:$PATIENT .
method:$METHOD wasAssociatedWith provider:$PROVIDER .
"
    fi

    # Create an empty commit with the PROV message
    dbg git commit --allow-empty \
        --author "$PROVIDER" \
        --date "$DATE" \
        -m "$MESSAGE
$MESSAGE2"
}

# Add data|result
# Uses :
# - ID
# - PATIENT
# - SAMPLE
# - [USE data:<id> | <data_hash>]
# - [REVISION_OF data|result:<id> | <data|result_hash>]
# - [INVALIDATE data|result:<id> | <data|result_hash>]
function add_object
{
    # Copy all the given files to the $OBJECT folder recursively
    cp "$CURRENT_DIR/"$FILES "$GIT_OMMIX_REPO_DIR/$PATIENT/$OBJECT" -r

    # Add the $OBJECT folder to git
    dbg git add "$OBJECT"

    # TODO: detect if modified $OBJECT -> revision_of
    #find commit directly?
    if `git status --porcelain | grep ^M -q`;then
        git status --porcelain | grep ^M | \
            (while read line;do
                 REVISION_OF=`git log --pretty=%s --follow --diff-filter=A ${line:3}`
             done)
    fi

    echo "$REVISION_OF"
    exit 0

    if [[ "$OBJECT" == "data" ]];then
        # data always derives from the sample
        USE="sample:$SAMPLE"
    else
        # accept data:id (as is) or commit hash (translated to data:id)
        if [[ "${USE%%:*}" != "data" ]];then
            if `dbg git log "$USE" --pretty=%s -1`;then
                USE=`git log "$USE" --pretty=%s -1`
            else
                die "$USE is not the commit hash or the name of existing data in sample:$SAMPLE of patient:$PATIENT"
            fi
        fi

        # check if existing data for this sample
        if ! `git log --oneline | grep -F "$USE" -q`;then
            die "$USE is not the name of existing data in sample:$SAMPLE of patient:$PATIENT"
        fi
    fi

    # Build the PROV message
    # TODO: wasRevisionOf should replace wasDerivedFrom
    MESSAGE="$OBJECT:$ID

$OBJECT:$ID a prov:Entity .
$OBJECT:$ID wasDerivedFrom $USE .
$OBJECT:$ID wasAttributedTo provider:$PROVIDER .
$OBJECT:$ID generatedAtTime xsd:dateTime:$DATE .
"

    # If the $OBJECT is a REVISION_OF
    if [[ "$REVISION_OF" ]];then
        # accept $OBJECT:id (as is) or commit hash (translated to $OBJECT:id)
        if [[ "${REVISION_OF%%:*}" != "$OBJECT" ]];then
            if `dbg git log "$REVISION_OF" --pretty=%s -1`;then
                REVISION_OF=`git log "$REVISION_OF" --pretty=%s -1`
            else
                die "$REVISION_OF is not the commit hash or the name of existing $OBJECT in sample:$SAMPLE of patient:$PATIENT"
            fi
        fi

        # check if existing $OBJECT for this sample
        if `git log --oneline | grep -F "$REVISION_OF" -q`;then
            MESSAGE+="$OBJECT:$ID wasRevisionOf $REVISION_OF .
"
        else
            die "$REVISION_OF is not the name of existing $OBJECT in sample:$SAMPLE of patient:$PATIENT"
        fi
    fi

    # If the $OBJECT INVALIDATEs one or more previous $OBJECT commit(s)
    if [[ "$INVALIDATE" && "$METHOD" ]];then # TODO: deal with arrays!
        # accept $OBJECT:id (as is) or commit hash (translated to $OBJECT:id)
        if [[ "${INVALIDATE%%:*}" != "$OBJECT" ]];then
            if `dbg git log "$INVALIDATE" --pretty=%s -1`;then
                INVALIDATE=`git log "$INVALIDATE" --pretty=%s -1`
            else
                die "$INVALIDATE is not the commit hash or the name of existing $OBJECT in sample:$SAMPLE of patient:$PATIENT"
            fi
        fi

        # check if existing $OBJECT for this sample
        if `git log --oneline | grep -F $INVALIDATE" -q`;then
            MESSAGE+="$INVALIDATE wasInvalidatedBy method:$METHOD .
"
        else
            die "$INVALIDATE is not the name of existing $OBJECT in sample:$SAMPLE of patient:$PATIENT"
        fi
    fi

    # Add a method PROV triplets if given
    if [[ "$METHOD" ]];then
        MESSAGE+="$OBJECT:$ID wasGeneratedBy method:$METHOD .

method:$METHOD a prov:Activity .
method:$METHOD used $USE .
method:$METHOD startedAtTime xsd:dateTime:$DATE .
method:$METHOD wasAssociatedWith provider:$PROVIDER .
"
    fi

    # Create a commit with the PROV message and the added $OBJECT
    dbg git commit \
        --date "$DATE" \
        --author "$PROVIDER" \
        -m "$MESSAGE
$MESSAGE2"
}

# Add
function add
{
    echo "Adding $OBJECT:$ID"

    case "$OBJECT" in
        patient)
            add_patient
            exit 0
            ;;
        sample)
            # A sample needs a patient
            [[ "$PATIENT" ]] || die "Please provide a --patient"

            add_sample
            exit 0
            ;;
        data|result)
            # Data and results need a patient
            [[ "$PATIENT" ]] || die "Please provide a --patient"

            # Data and results need a sample
            [[ "$SAMPLE" ]] || die "Please provide a --sample"

            # A result needs to use data
            [[ "$OBJECT" == "result" ]] && [[ "$USE" ]] || die "Please --use data when adding a result"

            # if [[ -z "$FILES" ]];then
            #     die "Please provide data files to add"
            # fi

            add_object
            exit 0
            ;;
        *) usage "add";;
    esac
}

## add diagnostic
## checkout one of the branches to merge (if a diagnostic exists, pick this one, else pick the first result)
## create the diagnostic branch
## git merge diag|1 result|2 result|3 --no-ff -f "diagnostic:1"


# Return the list of samples
function list_samples
{
    # List all branches but master an git-annex
    git branch | grep -v 'master' | grep -v 'git-annex'
}

# Return the provenance in turtle format
# It is the concatenation of all commit messages (without the subject line)
function prov_all
{
    git log --pretty=format:'# %s%n%b' --author-date-order --reverse
}

# Get up-to-date result of a sample
# Print the last commit
function last
{
    git log -n 1 --pretty="format:%s"
}

## Completions
function _completions
{
    #COMP_WORDS = array of words typed after the name of the program
    #COMP_CWORD = index pointing to the word the cursor is at
    #COMP_LINE = the current command line
    if [[ $COMP_CWORD -eq 1 ]];then
        OPTIONS="add invalidate revise query"
    elif [[ $COMP_CWORD -eq 2 ]];then
        case ${COMP_WORDS[1]} in
            query) OPTIONS="list prov";;
        esac
    elif [[ $COMP_CWORD -gt 2 ]];then
        PREV=${COMP_WORDS[$((COMP_CWORD-1))]}
        case $PREV in
            -p|--patient) OPTIONS="$(ls ~/GitOmmix/)";;
            -s|--sample) OPTIONS="sample1 sample2";;
            -D|--date) OPTIONS="$(date +%Y-%m-%d)";;
            -P|--provider) OPTIONS="provider1 provider2";;
            *) OPTIONS="-p --patient -s --sample -D --date -P --provider -m --message -d --debug $(ls)";;
        esac
    fi

    COMPREPLY=`compgen -W "$OPTIONS" -- "${COMP_WORDS[$COMP_CWORD]}"`
}


complete -F _completions git-ommix
