#!/bin/bash

# usage function
function usage()
{
    case "$1" in
        root) 
            echo "git ommix {verb} {object} [--options]Â [files]

Verbs:
- add
- list
- get

Objects:
- patient
- sample
- data
- result
- diagnostic

Options:
- --id/-i : object id (default = random base64 10 chars)
- --date/-D : sampling/analysis date (default = current date)
- --provider/-P : data/result provider (default = current user)
- --patient/-p : patient (default = current patient)
- --sample/-s : sample (default = current sample)
- --message/-m : add an arbitrary PROV-O RDF triplet to the transaction
- --debug/-d : debug

Files: files to add (default = all new/modified files)

Register bash completions with register completions

Git ommix can be configured with the \$XDG_CONFIG/.gitommix file, or with environment variables

Available options are:
- GIT_OMMIX_REPO_DIR : place to find patient repos
"
            ;;
        add)
            echo "git ommix add {patient, sample, data, result, diagnostic} [--options] [--message]

# Patient 

Create patient repo with the given id.
Options :

-i <id>

# Sample

Create the branch with the given sample id for the current or selected patient.

Options :

 -i <id>
 -p <patient>

# Data 

Add the FILES to data, with the given id, for the current or selected sample in the current or selected patient.
Data are always DERIVED_FROM the sample, but could be also be a REVISION_OF previous data. This can be set by pointing to a data commit to revise.
The data that has been revised can also be INVALIDATEd at the same time.

Options :

-i <id>
-p <patient>
-s <sample>
[--revision_of <data_hash>]
[--invalidate]

# Result 

Options :

-i <id> 
-p <patient> 
-s <sample> 
--use <data_hash> 
[--revision_of <result_hash>]
[--invalidate]

# Diagnostic

Add a diagnostic with the given id, for the current or selected patient.
The diagnostic can USE multiple results and diagnostics, be the REVISION_OF multiple diagnostics, which can be INVALIDATEd at the same time.
The diagnostic branch pointers for the revised diagnostics are destroyed.

Options :

-i <id>
-p <patient>
--use <result/diagnostic_hash>
[--revision_of <diagnostic_hash>]
[--invalidate]

Add data/result to the current patient and sample if inside a repo, or to the --patient and --sample specified.
If stateless, copy the files to the repo."
            ;;
    esac
    exit 0
}

# exit and print message
function die()
{
    echo $@
    exit 1
}

# redirect commands if not debugging
function dbg() {
    if [[ -n "$DEBUG" ]]; then
        "$@"
    else
        "$@" &>/dev/null
    fi
}

# Create a repository
function create_repo()
{
    echo "Creating patient:$1 repo"

    mkdir -p "$1/data"
    mkdir -p "$1/result"
    cd "$1"
    git init &>/dev/null
    git annex init &>/dev/null
    git config core.pager cat
    git config annex.largefiles 'largerthan=1Mb or include=data/* or include=results/*'
    git commit --allow-empty \
        --date "$DATE" \
        --author "$PROVIDER" \
        -m "Patient: $1

patient:$1 a prov:Entity .
patient:$1 a MSH:Patient ." &>/dev/null
}

# Create a sample
function create_sample()
{
    echo "Creating sample:$1 branch"
    
    METHOD="sampling"
    git stash push &>/dev/null
    git checkout -b "sample|$1" main &>/dev/null
    set +e
    git stash pop &>/dev/null
    set -e
    git commit --allow-empty \
        --date "$DATE" \
        --author "$PROVIDER" \
        -m "Sample: $1

provider:$PROVIDER a prov:Agent .

method:$METHOD a prov:Activity .
method:$METHOD used patient:$PATIENT .
method:$METHOD wasAssociatedWith provider:$PROVIDER .

sample:$1 a prov:Entity .
sample:$1 wasGeneratedBy method:$METHOD .
sample:$1 wasDerivedFrom patient:$PATIENT .
sample:$1 wasAttributedTo provider:$PROVIDER .
sample:$1 generatedAtTime xsd:dateTime:$DATE ." &>/dev/null
}

# Add data or result
function add()
{
    echo "Adding $1:$ID"
    
    METHOD="method_$1"

    case "$1" in
        data);;
        result);;
        *) usage "add";;
    esac

    if [[ "$STATELESS" = "y" ]]; then
        cp "$CURRENT_DIR/"$FILES "$GIT_OMMIX_REPO_DIR/$PATIENT/$1" -r
    fi

    git add "$1" &>/dev/null

    git commit --date "$DATE" \
        --author "$PROVIDER" \
        -m "$1: $ID

provider:$PROVIDER a prov:Agent .

method:$METHOD a prov:Activity .
method:$METHOD used sample:$SAMPLE . #used data:xxx
method:$METHOD wasAssociatedWith provider:$PROVIDER .
method:$METHOD startedAtTime xsd:dateTime:$DATE .

$1:$id a prov:Entity .
$1:$id wasGeneratedBy method:$METHOD .
$1:$id wasDerivedFrom sample:$SAMPLE . #wasDerivedFrom data:xxx
$1:$id wasAttributedTo provider:$PROVIDER .
$1:$id generatedAtTime xsd:dateTime:$DATE ."
}

## add diagnostic
## checkout one of the branches to merge (if a diagnostic exists, pick this one, else pick the first result)
## create the diagnostic branch
## git merge diag|1 result|2 result|3 --no-ff -f "diagnostic:1"


# Return the list of samples
function list_samples()
{
    # List all branches but master an git-annex
    git branch | grep -v 'master' | grep -v 'git-annex'
}

# Return the provenance in turtle format
# It is the concatenation of all commit messages (without the subject line)
function prov_all()
{
    git log --pretty=format:'# %s%n%b' --author-date-order --reverse
}

# Get up-to-date result of a sample
# Print the last commit
function last()
{
    git log -n 1 --pretty="format:%s"
}

## Completions
function _completions()
{
    #COMP_WORDS = array of words typed after the name of the program
    #COMP_CWORD = index pointing to the word the cursor is at
    #COMP_LINE = the current command line
    if [[ $COMP_CWORD -eq 1 ]];then
        OPTIONS="add invalidate revise query"
    elif [[ $COMP_CWORD -eq 2 ]];then
        case ${COMP_WORDS[1]} in
            query) OPTIONS="list prov";;
        esac
    elif [[ $COMP_CWORD -gt 2 ]];then
        PREV=${COMP_WORDS[$((COMP_CWORD-1))]}
        case $PREV in
            -p|--patient) OPTIONS="$(ls ~/GitOmmix/)";;
            -s|--sample) OPTIONS="sample1 sample2";;
            -D|--date) OPTIONS="$(date +%Y-%m-%d)";;
            -P|--provider) OPTIONS="provider1 provider2";;
            *) OPTIONS="-p --patient -s --sample -D --date -P --provider -m --message -d --debug $(ls)";;
        esac
    fi

    COMPREPLY=`compgen -W "$OPTIONS" -- "${COMP_WORDS[$COMP_CWORD]}"`
}


complete -F _completions git-ommix
